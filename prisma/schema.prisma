// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  username   String   @unique
  clerkId    String   @unique
  name       String?
  bio        String?
  imageUrl   String?
  location   String?
  website    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts    Post[] // 1 -> many
  comments Comment[] // 1 -> many
  likes    Like[] // 1 -> many

  followers Follows[] @relation("following") // users who follow this user 
  following Follows[] @relation("follower") // user following another user

  notifications         Notification[] @relation("user_notification") // this for notif receiving 
  notifications_created Notification[] @relation("notification_owner") // sending notif
}

model Post {
  id         String   @id @default(cuid())
  authorId   String
  content    String?
  imageUrl   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  authorId   String
  postId     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relation
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([authorId, postId]) // this is like for this authorId get all these comments
}

model Like {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  created_at DateTime @default(now())

  //relations 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // prevents same user liking twice
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  created_at  DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  ownerId    String
  type       NotificationType
  read       Boolean          @default(false)
  postId     String?
  commentId  String?
  created_at DateTime         @default(now())

  user    User     @relation("user_notification", fields: [userId], references: [id], onDelete: Cascade)
  owner   User     @relation("notification_owner", fields: [ownerId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, created_at])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
